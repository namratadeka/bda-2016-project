from __future__ import print_function

from pyspark import SparkContext
from pyspark.mllib.util import MLUtils
from pyspark.mllib.regression import LabeledPoint
from pyspark.mllib.tree import DecisionTree, DecisionTreeModel

import numpy as np

def skewData(favouredSetting,inpLine):
	values = inpLine.split(",")
	values = map(int,values)
	result = []
	n = len(values)
	weight = 1
	for i in range(0,n-1):
		if values[i]==favouredSetting[i]:
			weight = weight*2
	for i in range(0,weight):
		result.append(inpLine)
	return result
	
def getLabeledPoint(inpLine):
	values = inpLine.split(",")
	values = map(int,values)
	n = len(values)
	lp = LabeledPoint(values[n-1],values[0:n-1])
	return lp

if __name__ == "__main__":
	sc = SparkContext(appName = "DecisionTreeWithSkewing")
	#load data
	data = sc.textFile("/home/namratadeka/BDA/data.csv")   #change to hdfs location while running on cluster
	#create favoured values
	favouredSetting = np.random.binomial(1,0.5,size=10)
	#skew data
	dRdd = data.flatMap(lambda line: skewData(favouredSetting,line))
	#label skewed and original data
	skewed = dRdd.map(lambda line: getLabeledPoint(line))
	original = data.map(lambda line: getLabeledPoint(line))
	#partition into test and training
	(strainingData, stestData) = skewed.randomSplit([0.7, 0.3])
	(otrainingData, otestData) = original.randomSplit([0.7, 0.3])
	#train model
	smodel = DecisionTree.trainClassifier(strainingData, numClasses=2, categoricalFeaturesInfo={},impurity='gini')
	omodel = DecisionTree.trainClassifier(otrainingData, numClasses=2, categoricalFeaturesInfo={},impurity='gini')
	#predict on test
	spredictions = smodel.predict(stestData.map(lambda x: x.features))
	opredictions = omodel.predict(otestData.map(lambda x: x.features))
	#create confusion table
	SlabelsAndPredictions = stestData.map(lambda lp: lp.label).zip(spredictions)
	OlablesAndPredictions = otestData.map(lambda lp: lp.label).zip(opredictions)
    	#calculate classification error
	StestErr = SlabelsAndPredictions.filter(lambda (v, p): v != p).count() / float(stestData.count())
	OtestErr = OlablesAndPredictions.filter(lambda (v, p): v != p).count() / float(otestData.count())
	print('Test Error on Skewed data= ' + str(StestErr))
	print('Test Error on Original data= ' + str(OtestErr))
	print('Learned classification tree model on Original data:')
	print(omodel.toDebugString())
	print('Learned classification tree model on Skewed data:')
	print(smodel.toDebugString())
